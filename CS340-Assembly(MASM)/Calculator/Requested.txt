				; Calculator.asm
				; WILLIAM KELLEY
				; CS340 - ASSEMBLY LANGUAGE(RIMES)
				; CALCULATOR SCREEN INPUT PROGRAM

				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
Calculator.asm(9) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data
 = 0000000A			LF		EQU		10
 = 0000000D			CR		EQU		13
 = 00000000			NULL	EQU		0

 00000000 00000000		var1	dword	?
 00000004 00000000		var2	dword	?

 00000008 0000000A		divisor	        dword	10
 0000000C 00000000		result		    dword	?
 00000010 00000000		remainder		dword	?
 00000014 00			operator		byte	?
 00000015 00000008		times	        dword	8

 00000019 20 3D 20		equal	    byte	" = "
 0000001C  00000008 [		answer	    byte	8 dup (?), CR, LF, NULL
	    00
	   ] 0D 0A 00
 00000027 0A 0D 00		nextline    byte	LF, CR, NULL

 0000002A 00000000		outfile dword   ?
 0000002E 43 61 6C 63 75	output	byte	"CalculatorResults.txt", NULL
	   6C 61 74 6F 72
	   52 65 73 75 6C
	   74 73 2E 74 78
	   74 00
 00000044  00000028 [		input   byte	40 dup (?)
	    00
	   ]

 00000000			.code
 00000000			main PROC
 00000000  BA 0000002E R			mov edx, offset output
 00000005  E8 00000000 E			call CreateOutputFile
 0000000A  A3 0000002A R			mov outfile, eax
 0000000F			again:
 0000000F  8D 35 00000044 R			lea esi, input
 00000015  E8 0000008D				call _READ_LINE
 0000001A  8D 35 00000044 R			lea esi, input
 00000020  A1 0000002A R			mov eax, outfile
 00000025  E8 000000CA				call _PRINT_TO_FILE
 0000002A  8D 35 00000044 R			lea esi, input
 00000030  E8 00000086				call _ASCII_TO_INT
 00000035  A3 00000000 R			mov var1, eax
 0000003A  4E					dec esi
 0000003B  E8 000000DF				call _NEXTDIGIT
 00000040  E8 00000076				call _ASCII_TO_INT
 00000045  A3 00000004 R			mov var2, eax
 0000004A  8D 35 00000044 R			lea esi, input
 00000050  E8 000000D8				call _WHICHOPERATOR
 00000055  8D 35 0000001C R			lea esi, answer
 0000005B  B9 00000008				mov ecx, 8
 00000060  E8 000000AB				call _BLANKOUT
 00000065  A1 0000000C R			mov eax, result
 0000006A  E8 0000006E				call _INT_TO_ASCII
 0000006F  8D 35 00000019 R			lea esi, equal
 00000075  A1 0000002A R			mov eax, outfile
 0000007A  E8 00000075				call _PRINT_TO_FILE
 0000007F  8D 35 00000027 R			lea esi, nextline
 00000085  E8 0000011F				call _WRITE_LINE
 0000008A  8B 0D 00000015 R			mov ecx, times
 00000090  83 F9 00				cmp ecx, 0
 00000093  49					dec ecx
 00000094  89 0D 00000015 R			mov times, ecx
 0000009A  0F 85 FFFFFF6F			jne again
 000000A0			complete:
						invoke ExitProcess, 0
 000000A0  6A 00	   *	    push   +000000000h
 000000A2  E8 00000000 E   *	    call   ExitProcess
 000000A7			main endP

 000000A7			_READ_LINE PROC
 000000A7			next_char:
 000000A7  E8 00000000 E			call ReadChar
 000000AC  E8 00000000 E			call WriteChar
 000000B1  88 06				mov[esi], al
 000000B3  3C 0D				cmp al, CR
 000000B5  74 03				je done
 000000B7  46					inc esi
 000000B8  EB ED				jmp next_char
 000000BA  C3			done:	ret
 000000BB			_READ_LINE endP

 000000BB			_ASCII_TO_INT PROC
 000000BB  BB 00000000				mov ebx, 0
 000000C0  B8 00000000				mov eax, 0
 000000C5			next_digit:
 000000C5  8A 1E				mov bl, [esi]
 000000C7  80 FB 30				cmp bl, '0'
 000000CA  7C 10				jl not_digit
 000000CC  80 FB 39				cmp bl, '9'
 000000CF  7F 0B				jg not_digit
 000000D1  80 EB 30				sub bl, '0'
 000000D4  6B C0 0A				imul eax, 10
 000000D7  03 C3				add eax, ebx
 000000D9  46					inc esi
 000000DA  EB E9				jmp next_digit
 000000DC			not_digit:
 000000DC  C3					ret
 000000DD			_ASCII_TO_INT endP

 000000DD			_INT_TO_ASCII PROC
 000000DD			next_digit:
 000000DD  BA 00000000				mov edx, 0
 000000E2  F7 35 00000008 R			div divisor
 000000E8  80 C2 30				add dl, '0'
 000000EB  4E					dec esi
 000000EC  88 16				mov [esi], dl
 000000EE  83 F8 00				cmp eax, 0
 000000F1  75 EA				jne next_digit
 000000F3  C3					ret
 000000F4			_INT_TO_ASCII endP

 000000F4			_PRINT_TO_FILE PROC
 000000F4			next:
 000000F4  8A 16				mov dl, [esi]
 000000F6  80 FA 00				cmp dl, NULL
 000000F9  74 14				je outOfHere
 000000FB  8B D6				mov edx, esi
 000000FD  B9 00000001				mov ecx, 1
 00000102  A1 0000002A R			mov eax, outfile
 00000107  E8 00000000 E			call WriteToFile
 0000010C  46					inc esi
 0000010D  EB E5				jmp next
 0000010F			outOfHere:
 0000010F  C3					ret
 00000110			_PRINT_TO_FILE endP

 00000110			_BLANKOUT PROC
 00000110  BA 00000020		mov edx, ' '
 00000115			blank :
 00000115  88 16				mov[esi], dl
 00000117  46					inc esi
 00000118  49					dec ecx
 00000119  83 F9 00				cmp ecx, 0
 0000011C  75 F7				jne blank
 0000011E  C3					ret
 0000011F			_BLANKOUT endP

 0000011F			_NEXTDIGIT PROC
 0000011F			noDigit:
 0000011F  46					inc esi
 00000120  8A 1E				mov bl, [esi]
 00000122  80 FB 30				cmp bl, '0'
 00000125  7C F8				jl noDigit
 00000127  80 FB 39				cmp bl, '9'
 0000012A  7F F3				jg noDigit
 0000012C  C3					ret
 0000012D			_NEXTDIGIT endP

 0000012D			_WHICHOPERATOR PROC
 0000012D  BB 00000000				mov		ebx,0
 00000132  8A 1E		next:	mov	bl,[esi]
 00000134  80 FB 2A				cmp	bl,'*'
 00000137  74 12				je	multiply
 00000139  80 FB 2F				cmp	bl,'/'
 0000013C  74 22				je	divide
 0000013E  80 FB 2D				cmp	bl,'-'
 00000141  74 53				je	subtraction
 00000143  80 FB 2B				cmp	bl,'+'
 00000146  74 3C				je	addition
 00000148  46					inc esi
 00000149  EB E7				jmp	next
 0000014B  A1 00000000 R	multiply:	mov	eax, var1
 00000150  8B 1D 00000004 R			mov ebx, var2
 00000156  0F AF C3				imul eax, ebx
 00000159  A3 0000000C R			mov	result, eax
 0000015E  EB 48				jmp	done
 00000160			divide:
 00000160  C6 05 00000014 R			mov operator, '/'
	   2F
 00000167  BA 00000000				mov	edx, 0
 0000016C  A1 00000000 R			mov	eax, var1
 00000171  F7 3D 00000004 R			idiv var2
 00000177  89 15 00000010 R			mov	remainder, edx
 0000017D  A3 0000000C R			mov	result, eax
 00000182  EB 24				jmp	done
 00000184  A1 00000000 R	addition:	mov	eax, var1
 00000189  03 05 00000004 R			add	eax, var2
 0000018F  A3 0000000C R			mov	result, eax
 00000194  EB 12				jmp	done
 00000196  A1 00000000 R	subtraction:	mov	eax, var1
 0000019B  2B 05 00000004 R			sub	eax, var2
 000001A1  A3 0000000C R			mov result, eax
 000001A6  EB 00				jmp done
 000001A8			done:
 000001A8  C3					ret
 000001A9			_WHICHOPERATOR endP

 000001A9			_WRITE_LINE PROC
 000001A9			next_char:
 000001A9  8A 06				mov al, [esi]
 000001AB  3C 00				cmp al, NULL
 000001AD  74 08				je nearend
 000001AF  E8 00000000 E			call WriteChar
 000001B4  46					inc esi
 000001B5  EB F2				jmp next_char
 000001B7			nearend:
 000001B7  C3					ret
 000001B8			_WRITE_LINE endP
				end main

	   1 Warnings
	   0 Errors
